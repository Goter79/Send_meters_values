import json
import sqlite3 as sl
from telebot.types import  ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from button import button_whith_IPU
from bot import bot # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞

database = Database()
start_txt = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û –ì–£–ö-–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä. \n\n –¢—É—Ç –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ —Å–≤–æ–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø—Ä–∏–±–æ—Ä–∞–º —É—á–µ—Ç–∞'

@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
    req = call.data.split('_')

    if 'addVol' in req[0]:
        bot.delete_message(call.message.chat.id, call.message.message_id)

        json_string = json.loads(req[0])
        id_meter = json_string['idmeter']
        LS = json_string['LS']
        sqlTransaction = database.listColledjeForPage(tables='Meter_Measure', wheres=" where LS='"+LS+"' ", id_meter=id_meter)
        tt=button_whith_IPU(call.message, sqlTransaction)
        markup=tt[0]
        Meter=tt[1]
        
        bot.send_message(call.message.chat.id,
                                        f'<code><b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ò–ü–£:</b>\n\n'
                                        f'<p>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</p><p><b>{Meter[3]}</b></p>\n\n'
                                        f'–£–ª—É–≥–∞                 :<b>{Meter[4]}</b>\n'
                                        f'–ù–æ–º–µ—Ä –ò–ü–£             :<b>{Meter[5]}</b>\n'
                                        f'–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è  :<b>{str(Meter[6])}</b>\n'
                                        f'–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è     :<b>{str(Meter[7])}</b></code>',
                              parse_mode="HTML")
        # bot.send_message(call.message.chat.id, f'<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –ò–ü–£:</b>', parse_mode="HTML")
        # –¥–∞–ª–µ–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π
         
    elif req[0] == 'SetLS':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        # markup = InlineKeyboardMarkup()
        # SetLS(markup)  
        bot.send_message(call.message.chat.id, f'<b>–í–≤–µ–¥–∏—Ç–µ –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç:</b>', parse_mode="HTML")
        bot.register_next_step_handler(call.message,Find_LS)
        # bot.send_message(call.message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞");
        # bot.register_next_step_handler(call.message,Find_LS)
        


    elif 'pagination' in req[0]:
        json_string = json.loads(req[0])
        id_meter = json_string['idmeter']
        LS = json_string['LS']
        sqlTransaction = database.listColledjeForPage(tables='Meter_Measure', wheres=" where LS='"+LS+"' ", id_meter=id_meter)
        tt=button_whith_IPU(call.message, sqlTransaction)
        markup=tt[0]
        Meter=tt[1]
        
        bot.edit_message_text(
                                        f'–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç        :<b>{Meter[3]}</b>\n\n'
                                        f'–£–ª—É–≥–∞               :<b>{Meter[4]}</b>\n'
                                        f'–ù–æ–º–µ—Ä –ò–ü–£           :<b>{Meter[5]}</b>\n'
                                        f'–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:<b>{str(Meter[6])}</b>\n'
                                        f'–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è   :<b>{str(Meter[7])}</b>',
                              parse_mode="HTML",reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)

# —Å–ø–∏—Å–æ–∫ –ò–ü–£ –ø–æ –õ–°  
def Find_LS(message):
    if message.text.isdigit():
        sqlTransaction = database.listColledjeForPage(tables='Meter_Measure', wheres=" where LS='"+message.text+"' ", id_meter='')

        if sqlTransaction[1] !=0:
            tt=button_whith_IPU(message, sqlTransaction)
            markup=tt[0]
            Meter=tt[1]

            bot.send_message(message.from_user.id,
                                        f'<code>–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç			:<b>{Meter[3]}</b>\n\n'
                                        f'–£–ª—É–≥–∞					:<b>{Meter[4]}</b>\n'
                                        f'–ù–æ–º–µ—Ä –ò–ü–£				:<b>{Meter[5]}</b>\n'
                                        f'–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è	:<b>{str(Meter[6])}</b>\n'
                                        f'–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è   	:<b>{str(Meter[7])}</b></code>',
                                        parse_mode="HTML", reply_markup = markup)
        else:
            bot.send_message(message.from_user.id, f'–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç!!!\n\n–í–≤–µ–¥–∏—Ç–µ 9 —Ü–∏—Ñ—Ä\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞')
            bot.register_next_step_handler(message,Find_LS)
    else:
        bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ 9 —Ü–∏—Ñ—Ä\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞')
        bot.register_next_step_handler(message,Find_LS)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    markup_reply = ReplyKeyboardMarkup(resize_keyboard=True).add(
        "–ü–æ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è", "–ü–æ–º–æ—â—å", "üëÄ –ù–∞—à –∫–∞–Ω–∞–ª")
    bot.send_message(message.chat.id, start_txt, reply_markup=markup_reply)

@bot.message_handler(content_types=['text'])
def go_vvod(message):
    if message.text == "–ü–æ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è": 
        bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞\n –í–≤–µ–¥–∏—Ç–µ 9 —Ü–∏—Ñ—Ä',)
        bot.register_next_step_handler(message,Find_LS)


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        # –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ—Ç–∞ ‚Äî –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            bot.polling(none_stop=True, interval=0)
        # –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî —Å–æ–æ–±—â–∞–µ–º –ø—Ä–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        except Exception as e: 
            print('‚ùå‚ùå‚ùå‚ùå‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ! ‚ùå‚ùå‚ùå‚ùå‚ùå'+e)
